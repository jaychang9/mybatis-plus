ext {
    configuration = [
        javaVersion = JavaVersion.VERSION_1_8
    ]

    libraries = [
        mybatisSpringVersion = '1.3.2',
        mybatisVersion = '3.4.6',
        springVersion = '4.3.5.RELEASE',
        springBootVersion = '2.0.1.RELEASE',
        jsqlparserVersion = '1.2',
    ]

    dependencies = [
        "jsqlparser"                        : "com.github.jsqlparser:jsqlparser:${jsqlparserVersion}",
        "mybatis-spring"                    : "org.mybatis:mybatis-spring:${mybatisSpringVersion}",
        "mybatis"                           : "org.mybatis:mybatis:${mybatisVersion}",
        "spring-context-support"            : "org.springframework:spring-context-support:${springVersion}",
        "spring-jdbc"                       : "org.springframework:spring-jdbc:${springVersion}",
        "spring-tx"                         : "org.springframework:spring-tx:${springVersion}",
        "spring-web"                        : "org.springframework:spring-web:${springVersion}",
        "spring-aop"                        : "org.springframework:spring-aop:${springVersion}",
        "cglib"                             : "cglib:cglib:3.2.6",

        "javax.servlet-api"                 : "javax.servlet:javax.servlet-api:4.0.1",
        "aspectjweaver"                     : "org.aspectj:aspectjweaver:1.8.9",
        "mockito"                           : "org.mockito:mockito-core:2.13.0",
        "mybatis-ehcache"                   : "org.mybatis.caches:mybatis-ehcache:1.1.0",
        "slf4j-api"                         : "org.slf4j:slf4j-api:1.7.25",
        "logback-classic"                   : "ch.qos.logback:logback-classic:1.2.2",
        //test
        "spring-test"                       : "org.springframework:spring-test:${springVersion}",
        "junit"                             : "junit:junit:4.12",
        "mockito-all"                       : "org.mockito:mockito-all:1.10.19",
        "lombok"                            : "org.projectlombok:lombok:1.16.20",
        "fastjson"                          : "com.alibaba:fastjson:1.2.49",
        "jackson"                           : "com.fasterxml.jackson.core:jackson-databind:2.9.6",
        "tomcatjdbc"                        : "org.apache.tomcat:tomcat-jdbc:9.0.2",
        //datasource
        "hikaricp"                          : "com.zaxxer:HikariCP:2.7.0",
        "druid"                             : "com.alibaba:druid:1.0.29",
        "commons-dbcp2"                     : "org.apache.commons:commons-dbcp2:2.1.1",
        "sqlserver"                         : "com.microsoft.sqlserver:sqljdbc4:4.0",
        "postgresql"                        : "org.postgresql:postgresql:9.4.1212",
        "oracle"                            : "com.oracle:ojdbc14:10.2.0.5.0",
        "h2"                                : "com.h2database:h2:1.4.194",
        "mysql"                             : "mysql:mysql-connector-java:5.1.38",
        //code generator
        "velocity"                          : "org.apache.velocity:velocity-engine-core:2.0",
        "freemarker"                        : "org.freemarker:freemarker:2.3.9",

        // spring boot
        "springboot-autoconfigure"          : "org.springframework.boot:spring-boot-autoconfigure:${springBootVersion}",
        "springboot-configuration-processor": "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}",
        "springboot-starter-jdbc"           : "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}",
    ]
}

allprojects {
    group = 'com.baomidou'
    version = '3.0.6rc'
}

description = "Mybatis 增强工具包 - 只做增强不做改变，简化CRUD操作"

buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("com.netflix.nebula:gradle-extra-configurations-plugin:4.0.1")
    }
}

configure(subprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
    apply plugin: 'maven-publish'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'nebula.optional-base'

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    //noinspection GroovyAssignabilityCheck
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "http://www.cameliatk.jp/maven2/repository/thirdparty" }
        jcenter()
    }

    dependencies {
        compileOnly rootProject.ext.dependencies["lombok"]
        testCompile rootProject.ext.dependencies["mockito-all"]
        testCompile rootProject.ext.dependencies["lombok"]
        testCompile rootProject.ext.dependencies["junit"]
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
    // gradle clean build uploadArchives -Dun=用户名 -Dps=密码 -x test
    uploadArchives {
        repositories {
            mavenDeployer {
                def userName = System.getProperty("un")
                def passWord = System.getProperty("ps")
                repository(url: "http://10.1.10.240:8081/nexus/content/repositories/zcckj_releases/") {
                    //noinspection GroovyAssignabilityCheck
                    authentication(userName: userName, password: passWord)
                }

                snapshotRepository(url: "http://10.1.10.240:8081/nexus/content/repositories/zcckj_snapshots/") {
                    //noinspection GroovyAssignabilityCheck
                    authentication(userName: userName, password: passWord)
                }

                pom.version = "$project.version"
                pom.artifactId = "$project.name"
                pom.groupId = "$project.group"
            }
        }
    }

    compileJava.dependsOn(processResources)
}
